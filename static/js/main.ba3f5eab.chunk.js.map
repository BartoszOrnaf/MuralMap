{"version":3,"sources":["components/navbar/NavbarComponent.js","components/MuralBtn/MuralBtnComponent.js","components/MuralItems/MuralItemsComponent.js","components/MuralPopup/MuralPopupComponent.js","components/MuralMap/MuralMapComponent.js","App.js","serviceWorker.js","index.js"],"names":["NavbarComponent","id","React","Component","MuralBtnComponent","props","useState","top","setTop","left","setLeft","imgUrl","setImgUrl","btnStyle","backgroundImage","className","onClick","onMouseOver","parseInt","onMouseOut","style","MuralItemsComponent","this","setCurrentMuralId","toggleVisibility","bind","murals","MuralsData","map","mural","index","key","onClickFactory","call","MuralPopupComponent","useEffect","console","log","popupImgStyle","name","artist","address","date","history","href","aboutUrl","target","rel","showPrevious","showNext","MuralMapComponent","state","popupVisibility","currentMuralId","element","document","getElementById","dragImg","Image","src","startX","startY","addEventListener","e","preventDefault","clientX","clientY","dataTransfer","setDragImage","diffX","parsedLeft","diffY","parsedTop","setState","Object","keys","length","draggable","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ba3f5eab.chunk.js","sourcesContent":["import React from 'react';\r\nimport './NavbarComponent.scss'\r\nclass NavbarComponent extends React.Component {\r\n\r\n    render(){\r\n        return (\r\n            <div id=\"navbar\">\r\n                <span>Lódzki Mural</span> \r\n            </div>\r\n        )\r\n    }\r\n      \r\n}\r\n\r\nexport default NavbarComponent;","// import React from 'react';\r\nimport React, { useState } from 'react';\r\nimport './MuralBtnComponent.scss'\r\n\r\nfunction MuralBtnComponent(props) {\r\n\r\n    const [top, setTop] = useState(props.top)\r\n    const [left, setLeft] = useState(props.left)\r\n    const [imgUrl, setImgUrl ] = useState(\"./img/logoRed.png\")\r\n\r\n    function overStyle() {\r\n        setTop(parseInt(top) - 120);\r\n        setLeft(parseInt(left) - 120);\r\n        setImgUrl(props.imgUrl)\r\n    }\r\n \r\n  function  outStyle() {\r\n        setTop(parseInt(top) + 120);\r\n        setLeft(parseInt(left) + 120);\r\n        setImgUrl(\"./img/logoRed.png\")\r\n        \r\n    }\r\n\r\n \r\n    const btnStyle = {\r\n        left,\r\n        top,\r\n        backgroundImage: `url(\"${imgUrl}\")`\r\n    }\r\n\r\n  \r\n    return (\r\n        <button id={props.id}   \r\n            className=\"mural-button\"\r\n            onClick={props.onClick}\r\n            onMouseOver={overStyle}\r\n            onMouseOut={outStyle}\r\n            style={btnStyle}>\r\n\r\n        </button>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default MuralBtnComponent;","import React from 'react';\r\nimport './MuralItemsComponent.scss'; \r\nimport MuralsData from '../../MuralsDataBase/MuralsDataBase.json';\r\nimport MuralBtnComponent from '../MuralBtn/MuralBtnComponent'\r\n\r\nclass MuralItemsComponent extends React.Component {\r\n onClickFactory(id) {\r\n     return function(){\r\n        this.props.setCurrentMuralId(id);\r\n        this.props.toggleVisibility();\r\n\r\n     }.bind(this);\r\n }\r\n    render() {\r\n        const murals = MuralsData;\r\n        return (\r\n                <div id=\"all-murals\" >\r\n                    \r\n                    {murals.map((mural, index) => <MuralBtnComponent key ={index}\r\n                                                                     id={index}\r\n                                                                     top={mural.top}\r\n                                                                     left={mural.left}\r\n                                                                     imgUrl={mural.imgUrl}\r\n                                                                     onClick={this.onClickFactory.call(this, index)}\r\n                                                                    \r\n                                                                    />)}\r\n                </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default MuralItemsComponent;","import React, { useEffect } from 'react';\r\nimport './MuralPopupComponent.scss';\r\nimport MuralsData from '../../MuralsDataBase/MuralsDataBase.json';\r\n\r\n\r\nfunction MuralPopupComponent(props) {\r\n    useEffect(() => {\r\n       console.log(`This mural url is:(\"${MuralsData[props.id].imgUrl}\")`)\r\n\r\n       return function() {\r\n           console.log(\"Popup closed\");\r\n       };\r\n    }, [3]);\r\n\r\n\r\n    const popupImgStyle = {\r\n        backgroundImage: `url(\"${MuralsData[props.id].imgUrl}\")`,\r\n    }\r\n\r\n    return (\r\n        <div id=\"muralPopupWindow\" >\r\n            <div id=\"muralPopupFrame\">\r\n                <button className=\"popup-closing-button\" onClick={props.toggleVisibility}>\r\n                    X\r\n                    </button>\r\n                <div className=\"popup-img\" style={popupImgStyle} />\r\n\r\n                <div className=\"popup-name\">\r\n                    {MuralsData[props.id].name}\r\n                </div>\r\n\r\n                <div className=\"popup-tag\">\r\n                    Autor:\r\n                            </div>\r\n                <div className=\"popup-tag-content\">\r\n                    {MuralsData[props.id].artist}\r\n                </div>\r\n                <div className=\"popup-tag\">\r\n                    Adres:\r\n                            </div>\r\n                <div id=\"popup-address\" className=\"popup-tag-content\">\r\n                    {MuralsData[props.id].address}\r\n                </div>\r\n                <div className=\"popup-tag\">\r\n                    Data:\r\n                            </div>\r\n                <div className=\"popup-tag-content\">\r\n                    {MuralsData[props.id].date}\r\n                </div>\r\n                <div className=\"popup-history\">\r\n                    {MuralsData[props.id].history}\r\n                </div>\r\n                <div className=\"popup-source\">\r\n                    <a href={MuralsData[props.id].aboutUrl} target=\"_blank\" rel=\"noopener noreferrer\">Zobacz źródło</a>\r\n                </div>\r\n                <button className=\"popup-previous-button\" onClick={props.showPrevious}>\r\n                    &#60;\r\n                        {/* previous button, arrow from unicode*/}\r\n                </button>\r\n                <button className=\"popup-next-button\" onClick={props.showNext}>\r\n                    &#62;\r\n                        {/* next button, arrow from unicode */}\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default MuralPopupComponent;\r\n\r\n","import React from 'react'\r\nimport './MuralMapComponent.scss'\r\nimport MuralItemsComponent from '../MuralItems/MuralItemsComponent'\r\nimport MuralPopupComponent from '../MuralPopup/MuralPopupComponent';\r\nimport MuralsData from '../../MuralsDataBase/MuralsDataBase.json';\r\n\r\n\r\nclass MuralMapComponent extends React.Component {\r\n\r\n    state = {\r\n        popupVisibility: false,\r\n        currentMuralId: 0,\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        const element = document.getElementById('elem')\r\n        const dragImg = new Image();\r\n        dragImg.src = \"./img/handSmall.png\";\r\n\r\n        this.startX = 0;\r\n        this.startY = 0;\r\n\r\n        element.addEventListener('dragover', dragOver);\r\n        element.addEventListener('dragstart', dragStart);\r\n        element.addEventListener('dragend', dragEnd);\r\n\r\n        function dragStart(e) {\r\n            MuralMapComponent.startX = e.clientX;\r\n            MuralMapComponent.startY = e.clientY;\r\n            e.dataTransfer.setDragImage(dragImg, 35, 75);\r\n        }\r\n\r\n        function dragOver(e) {\r\n            e.preventDefault(); //shows different cursor inside \"element\" and outside of it.\r\n        }\r\n\r\n        function dragEnd(e) {\r\n            let diffX = e.clientX - MuralMapComponent.startX\r\n            let parsedLeft = parseInt(element.style.left);\r\n            if (parsedLeft + diffX < 0 && parsedLeft + diffX > -1600) { element.style.left = parsedLeft + diffX + 'px'; }\r\n\r\n            let diffY = e.clientY - MuralMapComponent.startY\r\n            let parsedTop = parseInt(element.style.top);\r\n            if (parsedTop + diffY < 0 && parsedTop + diffY > -800) { element.style.top = parsedTop + diffY + 'px'; }\r\n\r\n        }\r\n    }\r\n\r\n    setCurrentMuralId(id) {\r\n        console.log(id)\r\n        this.setState({\r\n            currentMuralId: id\r\n        })\r\n    }\r\n\r\n    showNext() {\r\n        if (this.state.currentMuralId < Object.keys(MuralsData).length - 1) {\r\n            this.setState({\r\n                currentMuralId: this.state.currentMuralId + 1\r\n            })\r\n        }\r\n    }\r\n\r\n    showPrevious() {\r\n        if (this.state.currentMuralId > 0) {\r\n            this.setState({\r\n                currentMuralId: this.state.currentMuralId - 1\r\n            })\r\n        }\r\n    }\r\n\r\n    toggleVisibility() {\r\n\r\n        this.setState(\r\n            function (state) {\r\n                return {\r\n                    popupVisibility: !state.popupVisibility\r\n                }\r\n            }\r\n        )\r\n\r\n    }\r\n\r\n    render() {\r\n        // Conditional rendering\r\n        return (\r\n                <div id=\"bigger-container\" >\r\n                    <div id=\"container\">\r\n                        <div id=\"elem\" draggable=\"true\" style={{ left: '-680px', top: '-300px' }}>\r\n                            < MuralItemsComponent\r\n                                setCurrentMuralId={ this.setCurrentMuralId.bind(this)}\r\n                                toggleVisibility={ this.toggleVisibility.bind(this)}\r\n                            />\r\n                        </div>\r\n                        {\r\n                            this.state.popupVisibility && <MuralPopupComponent\r\n                                id={this.state.currentMuralId}\r\n                                showNext={this.showNext = this.showNext.bind(this)}\r\n                                showPrevious={this.showPrevious = this.showPrevious.bind(this)}\r\n                                toggleVisibility={this.toggleVisibility = this.toggleVisibility.bind(this)}\r\n                            />\r\n\r\n\r\n                        }\r\n\r\n                    </div>\r\n                </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default MuralMapComponent;\r\n","import React from 'react';\r\nimport './App.scss';\r\nimport NavbarComponent from './components/navbar/NavbarComponent'\r\nimport MuralMapComponent from './components/MuralMap/MuralMapComponent';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <NavbarComponent />\r\n        <MuralMapComponent />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}